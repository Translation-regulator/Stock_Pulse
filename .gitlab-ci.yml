stages:
  - build
  - deploy

default:
  image: docker:latest
  services:
    - docker:dind

# === Build FastAPI ===
build-fastapi:
  stage: build
  script:
    - docker build -t $CI_REGISTRY_IMAGE/stockpulse-api:latest ./backend/app
    - docker push $CI_REGISTRY_IMAGE/stockpulse-api:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - backend/app/**/*

# === Build Crawler ===
build-crawler:
  stage: build
  script:
    - docker build -t $CI_REGISTRY_IMAGE/stockpulse-crawler:latest ./backend/crawler
    - docker push $CI_REGISTRY_IMAGE/stockpulse-crawler:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - backend/crawler/**/*

# === Deploy FastAPI ===
deploy-fastapi:
  stage: deploy
  tags:
    - ec2
  needs:
    - build-fastapi
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - backend/app/**/*
  script:
    - echo "ÈÉ®ÁΩ≤ FastAPI"
    - docker stop fastapi-app || true
    - docker rm fastapi-app || true
    - docker pull $CI_REGISTRY_IMAGE/stockpulse-api:latest
    - docker run -d --name fastapi-app -p 8000:8000 \
        -e DB_HOST=$DB_HOST \
        -e DB_USER=$DB_USER \
        -e DB_PASSWORD=$DB_PASSWORD \
        -e DB_NAME=$DB_NAME \
        -e FUGLE_API_TOKEN=$FUGLE_API_TOKEN \
        -e SECRET_KEY=$SECRET_KEY \
        -e ALGORITHM=$ALGORITHM \
        -e ACCESS_TOKEN_EXPIRE_MINUTES=$ACCESS_TOKEN_EXPIRE_MINUTES \
        $CI_REGISTRY_IMAGE/stockpulse-api:latest
  retry:
    max: 2
    when:
      - script_failure
      - runner_system_failure

# === Deploy Crawler ===
deploy-crawler:
  stage: deploy
  tags:
    - ec2
  needs:
    - build-crawler
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - backend/crawler/**/*
  script:
    - echo "ÈÉ®ÁΩ≤ Crawler"
    - docker pull $CI_REGISTRY_IMAGE/stockpulse-crawler:latest
    - docker stop crawler || true
    - docker rm crawler || true
    - docker run -d --name crawler $CI_REGISTRY_IMAGE/stockpulse-crawler:latest
  retry:
    max: 2
    when:
      - script_failure
      - runner_system_failure

# === Build Frontend ===
build-frontend:
  stage: build
  image: node:18
  script:
    - cd frontend
    - npm install
    - npm run build
    - mv dist ../dist
    - ls -al ../dist
  artifacts:
    paths:
      - dist
    expire_in: 1 hour
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# === Deploy Frontend to S3 + CloudFront ===
deploy-frontend:
  stage: deploy
  image: python:3.11
  needs:
    - build-frontend
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - pip install --upgrade pip
    - pip install awscli
  script:
    - echo "üß™ È©óË≠âËÆäÊï∏"
    - '[ -z "$AWS_S3_BUCKET" ] && echo "S3 bucket Êú™Ë®≠ÂÆö" && exit 1'
    - '[ -z "$AWS_CLOUDFRONT_ID" ] && echo "CloudFront ID Êú™Ë®≠ÂÆö" && exit 1'
    - '[ -d dist ] || (echo "dist Ë≥áÊñôÂ§æ‰∏çÂ≠òÂú®" && exit 1)'

    - echo "È©óË≠â AWS CLI"
    - aws --version
    - aws sts get-caller-identity

    - echo "‰∏äÂÇ≥Ëá≥ S3 ‰∏¶Âº∑Âà∂Âà∑Êñ∞"
    - aws s3 sync ./dist s3://$AWS_S3_BUCKET --region $AWS_DEFAULT_REGION --delete --cache-control "no-cache"

    - echo "Ê∏ÖÈô§ CloudFront Âø´Âèñ"
    - aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_ID --paths "/*"
  retry:
    max: 2
    when:
      - script_failure
      - runner_system_failure
