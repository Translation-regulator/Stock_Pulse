stages:
  - build
  - deploy

default:
  image: docker:latest
  services:
    - docker:dind

# ========== Build FastAPI ==========
build-fastapi:
  stage: build
  script:
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/stockpulse-api:latest ./backend/app
    - docker push $CI_REGISTRY_IMAGE/stockpulse-api:latest
  rules:
    - changes:
        - backend/app/**/*
        - .gitlab-ci.yml

# ========== Deploy FastAPI ==========
deploy-fastapi:
  stage: deploy
  tags:
    - ec2
  dependencies:
    - build-fastapi
  rules:
    - changes:
        - backend/app/**/*
        - .gitlab-ci.yml
  script:
    - echo "部署 FastAPI"
    - |
      PID=$(lsof -t -i:8000 || true)
      if [ -n "$PID" ]; then
        echo "8000 port 被佔用，釋放中..."
        docker ps --filter "publish=8000" --format "{{.ID}}" | xargs -r docker stop
        docker ps -a --filter "publish=8000" --format "{{.ID}}" | xargs -r docker rm
      else
        echo "8000 port 是空的"
      fi
    - docker stop fastapi-app || true
    - docker rm fastapi-app || true
    - docker rmi $CI_REGISTRY_IMAGE/stockpulse-api:latest || true
    - docker pull $CI_REGISTRY_IMAGE/stockpulse-api:latest
    - >
      docker run -d --name fastapi-app -p 8000:8000
      -e DB_HOST=$DB_HOST
      -e DB_USER=$DB_USER
      -e DB_PASSWORD=$DB_PASSWORD
      -e DB_NAME=$DB_NAME
      -e FUGLE_API_TOKEN=$FUGLE_API_TOKEN
      -e SECRET_KEY=$SECRET_KEY
      -e ALGORITHM=$ALGORITHM
      -e ACCESS_TOKEN_EXPIRE_MINUTES=$ACCESS_TOKEN_EXPIRE_MINUTES
      $CI_REGISTRY_IMAGE/stockpulse-api:latest
  retry:
    max: 2
    when: [script_failure, runner_system_failure]

# ========== Build Crawler ==========
build-crawler:
  stage: build
  script:
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/stockpulse-crawler:latest ./backend/crawler
    - docker push $CI_REGISTRY_IMAGE/stockpulse-crawler:latest
  rules:
    - changes:
        - backend/crawler/**/*
        - .gitlab-ci.yml

# ========== Deploy Crawler ==========
deploy-crawler:
  stage: deploy
  tags:
    - ec2
  dependencies:
    - build-crawler
  rules:
    - changes:
        - backend/crawler/**/*
        - .gitlab-ci.yml
  script:
    - echo "部署 Crawler"
    - docker stop crawler || true
    - docker rm crawler || true
    - docker rmi $CI_REGISTRY_IMAGE/stockpulse-crawler:latest || true
    - docker pull $CI_REGISTRY_IMAGE/stockpulse-crawler:latest
    - docker run -d --name crawler $CI_REGISTRY_IMAGE/stockpulse-crawler:latest
  retry:
    max: 2
    when: [script_failure, runner_system_failure]

# ========== Build Frontend ==========
build-frontend:
  stage: build
  image: node:18
  script:
    - cd frontend
    - npm install
    - npm run build
    - mv dist ../dist
    - ls -al ../dist
  artifacts:
    paths: [dist]
    expire_in: 1 hour
  rules:
    - changes:
        - frontend/**/*
        - .gitlab-ci.yml

# ========== Deploy Frontend ==========
deploy-frontend:
  stage: deploy
  image: python:3.11
  dependencies:
    - build-frontend
  rules:
    - changes:
        - frontend/**/*
        - .gitlab-ci.yml
  before_script:
    - pip install --upgrade pip
    - pip install awscli
  script:
    - echo "驗證變數"
    - '[ -z "$AWS_S3_BUCKET" ] && echo "S3 bucket 未設定" && exit 1'
    - '[ -z "$AWS_CLOUDFRONT_ID" ] && echo "CloudFront ID 未設定" && exit 1'
    - '[ -d dist ] || (echo "dist 資料夾不存在" && exit 1)'

    - aws --version
    - aws sts get-caller-identity

    - echo "上傳至 S3 並強制刷新"
    - aws s3 sync ./dist s3://$AWS_S3_BUCKET --region $AWS_DEFAULT_REGION --delete --cache-control "no-cache"

    - echo "清除 CloudFront 快取"
    - aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_ID --paths "/*"
  retry:
    max: 2
    when: [script_failure, runner_system_failure]
