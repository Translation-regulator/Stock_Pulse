stages:
  - build
  - deploy

default:
  image: docker:latest
  services:
    - docker:dind

# Build FastAPI
build-fastapi:
  stage: build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - backend/app/**/*
  script:
    - docker build -t stockpulse-api ./backend/app

# Build Crawler
build-crawler:
  stage: build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - backend/crawler/**/*
  script:
    - docker build -t stockpulse-crawler ./backend/crawler

# Deploy FastAPI
deploy-fastapi:
  stage: deploy
  tags:
    - ec2
  needs:
    - build-fastapi
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - backend/app/**/*
  script:
    - echo "部署 FastAPI 後端"
    - |
      cat <<EOF > ./backend/app/.env
      DB_HOST=$DB_HOST
      DB_USER=$DB_USER
      DB_PASSWORD=$DB_PASSWORD
      DB_NAME=$DB_NAME
      FUGLE_API_TOKEN=$FUGLE_API_TOKEN
      SECRET_KEY=$SECRET_KEY
      ALGORITHM=$ALGORITHM
      ACCESS_TOKEN_EXPIRE_MINUTES=$ACCESS_TOKEN_EXPIRE_MINUTES
      EOF
    - docker stop fastapi-app || true
    - docker rm fastapi-app || true
    - docker build -t stockpulse-api ./backend/app
    - docker run -d --name fastapi-app -p 8000:8000 --env-file ./backend/app/.env stockpulse-api

# Deploy Crawler
deploy-crawler:
  stage: deploy
  tags:
    - ec2
  needs:
    - build-crawler
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - backend/crawler/**/*
  script:
    - echo "部署 Crawler"
    - docker build -t stockpulse-crawler ./backend/crawler



# 建置前端（Vite + Node）
build-frontend:
  stage: build
  image: node:18
  script:
    - cd frontend
    - npm install
    - npm run build
    - echo "打包完成，移動 dist"
    - mv dist ../dist
    - ls -al ../dist
  artifacts:
    paths:
      - dist
    expire_in: 1 hour
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# 部署前端（使用 python:3.11 自行安裝 AWS CLI）
deploy-frontend:
  stage: deploy
  image: python:3.11
  needs: [build-frontend]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - pip install --upgrade pip
    - pip install awscli
  script:
    - echo "驗證 AWS CLI 是否正常"
    - aws --version

    - echo "驗證 IAM 身分"
    - aws sts get-caller-identity

    - echo "驗證 dist 路徑"
    - ls -al dist

    - echo "同步到 S3"
    - aws s3 sync ./dist s3://$AWS_S3_BUCKET --region $AWS_DEFAULT_REGION --delete

    - echo "清除 CloudFront 快取"
    - aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_ID --paths "/*"




